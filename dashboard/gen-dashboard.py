#!/usr/bin/env python3
#
# Copyright 2022, Proofcraft Pty Ltd
#
# SPDX-License-Identifier: BSD-2-Clause
#

# Import workflow names from all seL4 GitHub repositories and generate a test
# status board.

import os
from github import Github

# Do not show any tests results for these repos:
exclude_repos = [
    "gh-testboard",
    "website_pr_hosting",
]

# Repos in which the main branch is called 'main':
main_branch_repos = [
    "microkit",
    "rust-microkit-demo",
    "rust-microkit-http-server-demo",
    "rust-root-task-demo",
    "rust-sel4",
]

# Exclude workflows that are not available on default branch:
exlude_workflows = {
    "website": ["action.yml", "main.yml", "bamboo-pr.yml"],
    "util_libs": ["sel4test-hw.yml"],
    "seL4_tools": ["sel4test-hw.yml"],
    "graph-refine": ["decompiler.yml", "graph-refine.yml"],
    "seL4-CAmkES-L4v-dockerfiles": ["linter.yml", "docker-build.yml"],
    "rumprun-sel4-demoapps": ["test.yml"],
    "docs": ["pages-build-deployment"],
    "ci-actions": ["test.yml", "sel4bench-hw.yml", "sel4test-hw.yml", "sel4test-sim.yml"],
    "camkes-vm": ["test.yml"],
    "camkes-vm-examples": ["test.yml", "test-hw.yml"],
    "camkes-tool": ["cli.yml", "vm-test.yml", "test.yml"],
    "camkes": ["test.yml", "vm-test.yml"],
    "l4v": ["aarch64.yml", "proof.yml"],
    "sel4bench": ["sel4bench-pr.yml"],
    "sel4bench-manifest": ["sel4bench-pr.yml"],
    "seL4": ["kernel-compile.yml", "syscall_xml_lint.yml", "sel4test-sim.yml",
             "sel4test-hw.yml", "proof.yml", "sel4bench-pr.yml"],
    "sel4test": ["sel4test-hw.yml"],
    "sel4webserver": ["test.yml"],
}

# Repos that should be listed first:
main_repos = [
    "seL4",
    "l4v",
    "sel4bench",
    "camkes-tool",
    "camkes-vm-examples",
    "capdl",
    "sel4-tutorials",
    "microkit",
    "rust-sel4",
]

# URL of the seL4 org on GitHub:
org_url = "https://github.com/seL4"


def get_workflows() -> dict:
    '''Get all workflows from all seL4 repos and return them as a dict.'''

    token = os.environ.get("GITHUB_TOKEN")
    if not token:
        raise Exception("GITHUB_TOKEN environment variable not set")
    gh = Github(token)

    org = gh.get_organization('seL4')
    repos = org.get_repos()
    workflow_data = dict()
    for repo in repos:
        if repo.archived or repo.fork or repo.name in exclude_repos:
            continue
        workflow_data[repo.name] = dict()
        workflows = repo.get_workflows()
        for workflow in workflows:
            workflow_file = os.path.basename(workflow.path)
            if workflow_file in exlude_workflows.get(repo.name, []) \
                    or workflow_file == "pr.yml":
                continue
            workflow_data[repo.name][workflow_file] = workflow

    return workflow_data


def print_header():
    '''Print the header of the .md file; includes hard-coded main tests.'''

    print("""---
title: "Test status"
SPDX-License-Identifier: CC-BY-SA-4.0
SPDX-FileCopyrightText: 2022 seL4 Project a Series of LF Projects, LLC.
---

<!-- Do not edit. This file is generated by seL4/ci-actions/dashboard/gen-dashboard.py -->

# seL4 Test Status

The following list shows the current status of all seL4 GitHub test workflows
on the main branch.

## Main Tests

<span class="plain-links">[![seL4Test](https://github.com/seL4/seL4/actions/workflows/sel4test-deploy.yml/badge.svg?branch=master)](https://github.com/seL4/seL4/actions/workflows/sel4test-deploy.yml?query=branch%3Amaster)</span>
<span class="plain-links">[![Proofs](https://github.com/seL4/l4v/actions/workflows/proof-deploy.yml/badge.svg)](https://github.com/seL4/l4v/actions/workflows/proof-deploy.yml?query=branch%3Amaster)</span>
<span class="plain-links">[![Proof Sync](https://github.com/seL4/seL4/actions/workflows/preprocess-deploy.yml/badge.svg?branch=master)](https://github.com/seL4/seL4/actions/workflows/preprocess-deploy.yml?query=branch%3Amaster)</span>
<span class="plain-links">[![seL4Bench](https://github.com/seL4/sel4bench/actions/workflows/sel4bench.yml/badge.svg?branch=master)](https://github.com/seL4/sel4bench/actions/workflows/sel4bench.yml?query=branch%3Amaster)</span>
<span class="plain-links">[![CAmkES](https://github.com/seL4/camkes-tool/actions/workflows/camkes-deploy.yml/badge.svg?branch=master)](https://github.com/seL4/camkes-tool/actions/workflows/camkes-deploy.yml?query=branch%3Amaster)</span>
<span class="plain-links">[![CAmkES VM](https://github.com/seL4/camkes-vm-examples/actions/workflows/camkes-vm-deploy.yml/badge.svg?branch=master)](https://github.com/seL4/camkes-vm-examples/actions/workflows/camkes-vm-deploy.yml?query=branch%3Amaster)</span>

-----

""")


def print_repo(repo_name):
    '''Section header for one repo.'''

    print(f"\n### <span class=\"plain-links\">[{repo_name}]({org_url}/{repo_name}/)</span>\n")


def print_workflow(repo, workflow):
    '''Print a single workflow.'''

    branch_name = "main" if repo in main_branch_repos else "master"
    workflow_name = os.path.basename(workflow.path)
    base_url = f"{org_url}/{repo}/actions/workflows"
    badge_url = f"{base_url}/{workflow_name}/badge.svg?branch={branch_name}"
    action_url = f"{base_url}/{workflow_name}?query=branch%3A{branch_name}"
    print(f"<span class=\"plain-links\">[![{workflow.name}]({badge_url})]({action_url})</span>")


def print_badges(workflows: dict):
    print("## Main repositories\n")
    for repo in main_repos:
        if repo not in workflow_data:
            print(f"WARNING: main repo '{repo}' not found")
            continue
        print_repo(repo)
        for workflow in workflow_data[repo]:
            print_workflow(repo, workflow_data[repo][workflow])

    print("\n-----\n")

    print("## All repositories\n")
    for repo in sorted(workflow_data.keys()):
        if workflow_data[repo] == {}:
            continue
        print_repo(repo)
        for workflow in workflow_data[repo]:
            print_workflow(repo, workflow_data[repo][workflow])


if __name__ == "__main__":
    workflow_data = get_workflows()
    print_header()
    print_badges(workflow_data)
