#!/bin/bash
#
# Copyright 2016, Data61, CSIRO
#
# SPDX-License-Identifier: BSD-2-Clause
#
# Fetch (or update) a local copy of the target git mirror repository.
#
# Usage: im-env <base-dir> im-fetch-downstream-git <local-name> <remote-url>
#
# where:
# - base-dir: Absolute path to a checkout of this repository.
# - remote-url: Remote URL of the target git mirror repository.
# - local-name: Name to use for a local copy of the git mirror.

# Bash 'strict' mode.
set -euo pipefail
IFS=$'\n\t'

IM_LOCAL_NAME="$1"
IM_REMOTE_URL="$2"

if [ -z "$IM_DIR" ]; then
  echo "im-fetch-downstream-git: fatal: IM_DIR environment was not set" >&2
  exit 1
fi

if [ -z "$IM_LOCAL_NAME" ]; then
  echo "im-fetch-downstream-git: fatal: I wasn't given a local repository name" >&2
  exit 1
fi

if [ -z "$IM_REMOTE_URL" ]; then
  echo "im-fetch-downstream-git: fatal: I wasn't given a remote repository" >&2
  exit 1
fi

IM_REPOS_DIR="$IM_DIR/repos"
IM_LOCAL_DIR="$IM_REPOS_DIR/$IM_LOCAL_NAME"

printf "isabelle-mirror: fetching downstream mirror: $IM_REMOTE_URL\n"

function git_loc () {
  git -C "$IM_LOCAL_DIR" "$@"
}

function clone_exists () {
  (
    set +e
    IM_EXISTING_REMOTE=`git_loc remote get-url origin 2>/dev/null`
    if [ "$?" -ne 0 -o "$IM_EXISTING_REMOTE" != "$IM_REMOTE_URL" ]; then
      exit 1
    fi
  )
}

if clone_exists; then
  git_loc remote update --prune

elif [ ! -d "$IM_LOCAL_DIR" ]; then
  mkdir -p "$IM_REPOS_DIR"
  (
    cd "$IM_REPOS_DIR"
    git clone --bare "$IM_REMOTE_URL" "$IM_LOCAL_NAME"
  )

else
  echo "im-fetch-downstream-git: fatal: unexpected contents in $IM_LOCAL_DIR" >&2
  exit 1
fi
